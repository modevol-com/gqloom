type Mutation {
  deleteFromPosts(where: PostFilters): [Post!]!
  deleteFromUsers(where: UserFilters): [User!]!
  insertIntoPosts(onConflictDoNothing: PostInsertOnConflictDoNothingInput, onConflictDoUpdate: PostInsertOnConflictDoUpdateInput, values: [PostInsertInput!]!): [Post!]!
  insertIntoPostsSingle(onConflictDoNothing: PostInsertOnConflictDoNothingInput, onConflictDoUpdate: PostInsertOnConflictDoUpdateInput, value: PostInsertInput!): Post
  insertIntoUsers(onConflictDoNothing: UserInsertOnConflictDoNothingInput, onConflictDoUpdate: UserInsertOnConflictDoUpdateInput, values: [UserInsertInput!]!): [User!]!
  insertIntoUsersSingle(onConflictDoNothing: UserInsertOnConflictDoNothingInput, onConflictDoUpdate: UserInsertOnConflictDoUpdateInput, value: UserInsertInput!): User
  updatePosts(set: PostUpdateInput!, where: PostFilters): [Post!]!
  updateUsers(set: UserUpdateInput!, where: UserFilters): [User!]!
}

enum OrderDirection {
  asc
  desc
}

input PgIntegerFilters {
  AND: [PgIntegerFiltersNested!]
  NOT: PgIntegerFiltersNested
  OR: [PgIntegerFiltersNested!]
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input PgIntegerFiltersNested {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input PgSerialFilters {
  AND: [PgSerialFiltersNested!]
  NOT: PgSerialFiltersNested
  OR: [PgSerialFiltersNested!]
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input PgSerialFiltersNested {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input PgTextFilters {
  AND: [PgTextFiltersNested!]
  NOT: PgTextFiltersNested
  OR: [PgTextFiltersNested!]
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input PgTextFiltersNested {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

"""A post"""
type Post {
  author(where: UserFilters): User
  authorId: Int
  content: String
  id: Int!

  """The title of the post"""
  title: String!
}

"""A post"""
input PostFilters {
  AND: [PostFiltersNested!]
  NOT: PostFiltersNested
  OR: [PostFiltersNested!]
  authorId: PgIntegerFilters
  content: PgTextFilters
  id: PgSerialFilters

  """The title of the post"""
  title: PgTextFilters
}

input PostFiltersNested {
  authorId: PgIntegerFilters
  content: PgTextFilters
  id: PgSerialFilters

  """The title of the post"""
  title: PgTextFilters
}

"""A post"""
input PostInsertInput {
  authorId: Int
  content: String
  id: Int

  """The title of the post"""
  title: String!
}

input PostInsertOnConflictDoNothingInput {
  target: [PostTableColumn!]
  where: PostFilters
}

input PostInsertOnConflictDoUpdateInput {
  set: PostUpdateInput
  setWhere: PostFilters
  target: [PostTableColumn!]!
  targetWhere: PostFilters
}

input PostOrderBy {
  authorId: OrderDirection
  content: OrderDirection
  id: OrderDirection

  """The title of the post"""
  title: OrderDirection
}

enum PostTableColumn {
  authorId
  content
  id

  """The title of the post"""
  title
}

"""A post"""
input PostUpdateInput {
  authorId: Int
  content: String
  id: Int

  """The title of the post"""
  title: String
}

type Query {
  posts(limit: Int, offset: Int, orderBy: PostOrderBy, where: PostFilters): [Post!]!
  postsCount(where: PostFilters): Int!
  postsSingle(offset: Int, orderBy: PostOrderBy, where: PostFilters): Post
  users(limit: Int, offset: Int, orderBy: UserOrderBy, where: UserFilters): [User!]!
  usersCount(where: UserFilters): Int!
  usersSingle(offset: Int, orderBy: UserOrderBy, where: UserFilters): User
}

"""A user"""
type User {
  age: Int
  email: String
  id: Int!

  """The name of the user"""
  name: String!
  posts(limit: Int, offset: Int, orderBy: PostOrderBy, where: PostFilters): [Post!]!
}

"""A user"""
input UserFilters {
  AND: [UserFiltersNested!]
  NOT: UserFiltersNested
  OR: [UserFiltersNested!]
  age: PgIntegerFilters
  email: PgTextFilters
  id: PgSerialFilters

  """The name of the user"""
  name: PgTextFilters
}

input UserFiltersNested {
  age: PgIntegerFilters
  email: PgTextFilters
  id: PgSerialFilters

  """The name of the user"""
  name: PgTextFilters
}

"""A user"""
input UserInsertInput {
  age: Int
  email: String
  id: Int

  """The name of the user"""
  name: String!
}

input UserInsertOnConflictDoNothingInput {
  target: [UserTableColumn!]
  where: UserFilters
}

input UserInsertOnConflictDoUpdateInput {
  set: UserUpdateInput
  setWhere: UserFilters
  target: [UserTableColumn!]!
  targetWhere: UserFilters
}

input UserOrderBy {
  age: OrderDirection
  email: OrderDirection
  id: OrderDirection

  """The name of the user"""
  name: OrderDirection
}

enum UserTableColumn {
  age
  email
  id

  """The name of the user"""
  name
}

"""A user"""
input UserUpdateInput {
  age: Int
  email: String
  id: Int

  """The name of the user"""
  name: String
}