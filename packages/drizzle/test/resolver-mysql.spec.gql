type Mutation {
  deleteFromPost(where: PostFilters): MutationSuccessResult
  deleteFromUser(where: UserFilters): MutationSuccessResult
  insertIntoPost(values: [PostInsertInput!]!): MutationSuccessResult
  insertIntoPostSingle(value: PostInsertInput!): MutationSuccessResult
  insertIntoUser(values: [UserInsertInput!]!): MutationSuccessResult
  insertIntoUserSingle(value: UserInsertInput!): MutationSuccessResult
  updatePost(set: PostUpdateInput!, where: PostFilters): MutationSuccessResult
  updateUser(set: UserUpdateInput!, where: UserFilters): MutationSuccessResult
}

type MutationSuccessResult {
  isSuccess: Boolean!
}

input MySqlIntFilters {
  OR: [MySqlIntFiltersOr!]
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input MySqlIntFiltersOr {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input MySqlTextFilters {
  OR: [MySqlTextFiltersOr!]
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input MySqlTextFiltersOr {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

enum OrderDirection {
  asc
  desc
}

input PostFilters {
  OR: [PostFiltersOr!]
  authorId: MySqlIntFilters
  content: MySqlTextFilters
  id: MySqlIntFilters
  title: MySqlTextFilters
}

input PostFiltersOr {
  authorId: MySqlIntFilters
  content: MySqlTextFilters
  id: MySqlIntFilters
  title: MySqlTextFilters
}

input PostInsertInput {
  authorId: Int
  content: String
  id: Int
  title: String!
}

type PostItem {
  author: UserItem
  authorId: Int
  content: String
  id: Int!
  title: String!
}

input PostOrderBy {
  authorId: OrderDirection
  content: OrderDirection
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  authorId: Int
  content: String
  id: Int
  title: String
}

type Query {
  post(limit: Int, offset: Int, orderBy: PostOrderBy, where: PostFilters): [PostItem!]!
  postSingle(offset: Int, orderBy: PostOrderBy, where: PostFilters): PostItem
  user(limit: Int, offset: Int, orderBy: UserOrderBy, where: UserFilters): [UserItem!]!
  userSingle(offset: Int, orderBy: UserOrderBy, where: UserFilters): UserItem
}

input UserFilters {
  OR: [UserFiltersOr!]
  age: MySqlIntFilters
  email: MySqlTextFilters
  id: MySqlIntFilters
  name: MySqlTextFilters
}

input UserFiltersOr {
  age: MySqlIntFilters
  email: MySqlTextFilters
  id: MySqlIntFilters
  name: MySqlTextFilters
}

input UserInsertInput {
  age: Int
  email: String
  id: Int
  name: String!
}

type UserItem {
  age: Int
  email: String
  id: Int!
  name: String!
  posts: [PostItem!]!
}

input UserOrderBy {
  age: OrderDirection
  email: OrderDirection
  id: OrderDirection
  name: OrderDirection
}

input UserUpdateInput {
  age: Int
  email: String
  id: Int
  name: String
}