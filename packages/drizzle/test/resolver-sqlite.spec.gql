type Mutation {
  deleteFromPosts(where: PostFilters): [Post!]!
  deleteFromUsers(where: UserFilters): [User!]!
  insertIntoPosts(onConflictDoNothing: PostInsertOnConflictDoNothingInput, onConflictDoUpdate: PostInsertOnConflictDoUpdateInput, values: [PostInsertInput!]!): [Post!]!
  insertIntoPostsSingle(onConflictDoNothing: PostInsertOnConflictDoNothingInput, onConflictDoUpdate: PostInsertOnConflictDoUpdateInput, value: PostInsertInput!): Post
  insertIntoUsers(onConflictDoNothing: UserInsertOnConflictDoNothingInput, onConflictDoUpdate: UserInsertOnConflictDoUpdateInput, values: [UserInsertInput!]!): [User!]!
  insertIntoUsersSingle(onConflictDoNothing: UserInsertOnConflictDoNothingInput, onConflictDoUpdate: UserInsertOnConflictDoUpdateInput, value: UserInsertInput!): User
  updatePosts(set: PostUpdateInput!, where: PostFilters): [Post!]!
  updateUsers(set: UserUpdateInput!, where: UserFilters): [User!]!
}

enum OrderDirection {
  asc
  desc
}

type Post {
  author(where: UserFilters): User
  authorId: Int
  content: String
  id: Int!
  reviewer(where: UserFilters): User
  reviewerId: Int
  starredBy(limit: Int, offset: Int, orderBy: UserStarPostsOrderBy, where: UserStarPostsFilters): [UserStarPostsItem!]!
  title: String!
}

input PostFilters {
  AND: [PostFiltersNested!]
  NOT: PostFiltersNested
  OR: [PostFiltersNested!]
  authorId: SQLiteIntegerFilters
  content: SQLiteTextFilters
  id: SQLiteIntegerFilters
  reviewerId: SQLiteIntegerFilters
  title: SQLiteTextFilters
}

input PostFiltersNested {
  authorId: SQLiteIntegerFilters
  content: SQLiteTextFilters
  id: SQLiteIntegerFilters
  reviewerId: SQLiteIntegerFilters
  title: SQLiteTextFilters
}

input PostInsertInput {
  authorId: Int
  content: String
  id: Int
  reviewerId: Int
  title: String!
}

input PostInsertOnConflictDoNothingInput {
  target: [PostTableColumn!]
  where: PostFilters
}

input PostInsertOnConflictDoUpdateInput {
  set: PostUpdateInput
  setWhere: PostFilters
  target: [PostTableColumn!]!
  targetWhere: PostFilters
}

input PostOrderBy {
  authorId: OrderDirection
  content: OrderDirection
  id: OrderDirection
  reviewerId: OrderDirection
  title: OrderDirection
}

enum PostTableColumn {
  authorId
  content
  id
  reviewerId
  title
}

input PostUpdateInput {
  authorId: Int
  content: String
  id: Int
  reviewerId: Int
  title: String
}

type Query {
  posts(limit: Int, offset: Int, orderBy: PostOrderBy, where: PostFilters): [Post!]!
  postsCount(where: PostFilters): Int!
  postsSingle(offset: Int, orderBy: PostOrderBy, where: PostFilters): Post
  users(limit: Int, offset: Int, orderBy: UserOrderBy, where: UserFilters): [User!]!
  usersCount(where: UserFilters): Int!
  usersSingle(offset: Int, orderBy: UserOrderBy, where: UserFilters): User
}

input SQLiteIntegerFilters {
  AND: [SQLiteIntegerFiltersNested!]
  NOT: SQLiteIntegerFiltersNested
  OR: [SQLiteIntegerFiltersNested!]
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input SQLiteIntegerFiltersNested {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input SQLiteTextFilters {
  AND: [SQLiteTextFiltersNested!]
  NOT: SQLiteTextFiltersNested
  OR: [SQLiteTextFiltersNested!]
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input SQLiteTextFiltersNested {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input SQLiteTimestampFilters {
  AND: [SQLiteTimestampFiltersNested!]
  NOT: SQLiteTimestampFiltersNested
  OR: [SQLiteTimestampFiltersNested!]
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input SQLiteTimestampFiltersNested {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input StudentToCoursesFilters {
  AND: [StudentToCoursesFiltersNested!]
  NOT: StudentToCoursesFiltersNested
  OR: [StudentToCoursesFiltersNested!]
  courseId: SQLiteIntegerFilters
  createdAt: SQLiteTimestampFilters
  studentId: SQLiteIntegerFilters
}

input StudentToCoursesFiltersNested {
  courseId: SQLiteIntegerFilters
  createdAt: SQLiteTimestampFilters
  studentId: SQLiteIntegerFilters
}

type StudentToCoursesItem {
  courseId: Int
  createdAt: String
  studentId: Int
}

input StudentToCoursesOrderBy {
  courseId: OrderDirection
  createdAt: OrderDirection
  studentId: OrderDirection
}

"""A user"""
type User {
  """The age of the user"""
  age: Int
  courses(limit: Int, offset: Int, orderBy: StudentToCoursesOrderBy, where: StudentToCoursesFilters): [StudentToCoursesItem!]!

  """The email of the user"""
  email: String
  id: Int!

  """The name of the user"""
  name: String!
  posts(limit: Int, offset: Int, orderBy: PostOrderBy, where: PostFilters): [Post!]!
  reviewedPosts(limit: Int, offset: Int, orderBy: PostOrderBy, where: PostFilters): [Post!]!
  starredPosts(limit: Int, offset: Int, orderBy: UserStarPostsOrderBy, where: UserStarPostsFilters): [UserStarPostsItem!]!
}

"""A user"""
input UserFilters {
  AND: [UserFiltersNested!]
  NOT: UserFiltersNested
  OR: [UserFiltersNested!]

  """The age of the user"""
  age: SQLiteIntegerFilters

  """The email of the user"""
  email: SQLiteTextFilters
  id: SQLiteIntegerFilters

  """The name of the user"""
  name: SQLiteTextFilters
}

input UserFiltersNested {
  """The age of the user"""
  age: SQLiteIntegerFilters

  """The email of the user"""
  email: SQLiteTextFilters
  id: SQLiteIntegerFilters

  """The name of the user"""
  name: SQLiteTextFilters
}

"""A user"""
input UserInsertInput {
  """The age of the user"""
  age: Int

  """The email of the user"""
  email: String
  id: Int

  """The name of the user"""
  name: String!
}

input UserInsertOnConflictDoNothingInput {
  target: [UserTableColumn!]
  where: UserFilters
}

input UserInsertOnConflictDoUpdateInput {
  set: UserUpdateInput
  setWhere: UserFilters
  target: [UserTableColumn!]!
  targetWhere: UserFilters
}

input UserOrderBy {
  """The age of the user"""
  age: OrderDirection

  """The email of the user"""
  email: OrderDirection
  id: OrderDirection

  """The name of the user"""
  name: OrderDirection
}

input UserStarPostsFilters {
  AND: [UserStarPostsFiltersNested!]
  NOT: UserStarPostsFiltersNested
  OR: [UserStarPostsFiltersNested!]
  postId: SQLiteIntegerFilters
  userId: SQLiteIntegerFilters
}

input UserStarPostsFiltersNested {
  postId: SQLiteIntegerFilters
  userId: SQLiteIntegerFilters
}

type UserStarPostsItem {
  postId: Int
  userId: Int
}

input UserStarPostsOrderBy {
  postId: OrderDirection
  userId: OrderDirection
}

enum UserTableColumn {
  """The age of the user"""
  age

  """The email of the user"""
  email
  id

  """The name of the user"""
  name
}

"""A user"""
input UserUpdateInput {
  """The age of the user"""
  age: Int

  """The email of the user"""
  email: String
  id: Int

  """The name of the user"""
  name: String
}