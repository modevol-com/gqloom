type Mutation {
  deleteFromPosts(where: PostsFilters): [PostsItem!]!
  deleteFromUsers(where: UsersFilters): [UsersItem!]!
  insertIntoPosts(values: [PostsInsertInput!]!): [PostsItem!]!
  insertIntoPostsSingle(value: PostsInsertInput!): PostsItem
  insertIntoUsers(values: [UsersInsertInput!]!): [UsersItem!]!
  insertIntoUsersSingle(value: UsersInsertInput!): UsersItem
  updatePosts(set: PostsUpdateInput!, where: PostsFilters): [PostsItem!]!
  updateUsers(set: UsersUpdateInput!, where: UsersFilters): [UsersItem!]!
}

enum OrderDirection {
  asc
  desc
}

input PostsFilters {
  AND: [PostsFiltersNested!]
  NOT: PostsFiltersNested
  OR: [PostsFiltersNested!]
  authorId: SQLiteIntegerFilters
  content: SQLiteTextFilters
  id: SQLiteIntegerFilters
  title: SQLiteTextFilters
}

input PostsFiltersNested {
  authorId: SQLiteIntegerFilters
  content: SQLiteTextFilters
  id: SQLiteIntegerFilters
  title: SQLiteTextFilters
}

input PostsInsertInput {
  authorId: Int
  content: String
  id: Int
  title: String!
}

type PostsItem {
  author: UsersItem
  authorId: Int
  content: String
  id: Int!
  title: String!
}

input PostsOrderBy {
  authorId: OrderDirection
  content: OrderDirection
  id: OrderDirection
  title: OrderDirection
}

input PostsUpdateInput {
  authorId: Int
  content: String
  id: Int
  title: String
}

type Query {
  posts(limit: Int, offset: Int, orderBy: PostsOrderBy, where: PostsFilters): [PostsItem!]!
  postsCount(where: PostsFilters): Int!
  postsSingle(offset: Int, orderBy: PostsOrderBy, where: PostsFilters): PostsItem
  users(limit: Int, offset: Int, orderBy: UsersOrderBy, where: UsersFilters): [UsersItem!]!
  usersCount(where: UsersFilters): Int!
  usersSingle(offset: Int, orderBy: UsersOrderBy, where: UsersFilters): UsersItem
}

input SQLiteIntegerFilters {
  AND: [SQLiteIntegerFiltersNested!]
  NOT: SQLiteIntegerFiltersNested
  OR: [SQLiteIntegerFiltersNested!]
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input SQLiteIntegerFiltersNested {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  lt: Int
  lte: Int
  ne: Int
  notIn: [Int!]
}

input SQLiteTextFilters {
  AND: [SQLiteTextFiltersNested!]
  NOT: SQLiteTextFiltersNested
  OR: [SQLiteTextFiltersNested!]
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

input SQLiteTextFiltersNested {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

type StudentToCoursesItem {
  courseId: Int
  createdAt: String
  studentId: Int
}

input UsersFilters {
  AND: [UsersFiltersNested!]
  NOT: UsersFiltersNested
  OR: [UsersFiltersNested!]
  age: SQLiteIntegerFilters
  email: SQLiteTextFilters
  id: SQLiteIntegerFilters
  name: SQLiteTextFilters
}

input UsersFiltersNested {
  age: SQLiteIntegerFilters
  email: SQLiteTextFilters
  id: SQLiteIntegerFilters
  name: SQLiteTextFilters
}

input UsersInsertInput {
  age: Int
  email: String
  id: Int
  name: String!
}

type UsersItem {
  age: Int
  courses: [StudentToCoursesItem!]!
  email: String
  id: Int!
  name: String!
  posts: [PostsItem!]!
}

input UsersOrderBy {
  age: OrderDirection
  email: OrderDirection
  id: OrderDirection
  name: OrderDirection
}

input UsersUpdateInput {
  age: Int
  email: String
  id: Int
  name: String
}