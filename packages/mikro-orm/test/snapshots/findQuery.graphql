type Query {
  findQuery(where: UserFilter, orderBy: UserOrderBy, limit: Int, offset: Int): [User!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
}

input UserFilter {
  id: IDComparisonOperators
  name: StringComparisonOperators
  email: StringComparisonOperators
  age: IntComparisonOperators

  """
  Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
  """
  AND: [UserFilter!]

  """
  Joins query clauses with a logical OR returns all documents that match the conditions of either clause.
  """
  OR: [UserFilter!]

  """
  Inverts the effect of a query expression and returns documents that do not match the query expression.
  """
  NOT: UserFilter
}

input IDComparisonOperators {
  """Equals. Matches values that are equal to a specified value."""
  eq: ID

  """Greater. Matches values that are greater than a specified value."""
  gt: ID

  """
  Greater or Equal. Matches values that are greater than or equal to a specified value.
  """
  gte: ID

  """Contains, Contains, Matches any of the values specified in an array."""
  in: [ID!]

  """Lower, Matches values that are less than a specified value."""
  lt: ID

  """
  Lower or equal, Matches values that are less than or equal to a specified value.
  """
  lte: ID

  """Not equal. Matches all values that are not equal to a specified value."""
  ne: ID

  """Not contains. Matches none of the values specified in an array."""
  nin: [ID!]

  """&&"""
  overlap: [ID!]

  """@>"""
  contains: [ID!]

  """<@"""
  contained: [ID!]
}

input StringComparisonOperators {
  """Equals. Matches values that are equal to a specified value."""
  eq: String

  """Greater. Matches values that are greater than a specified value."""
  gt: String

  """
  Greater or Equal. Matches values that are greater than or equal to a specified value.
  """
  gte: String

  """Contains, Contains, Matches any of the values specified in an array."""
  in: [String!]

  """Lower, Matches values that are less than a specified value."""
  lt: String

  """
  Lower or equal, Matches values that are less than or equal to a specified value.
  """
  lte: String

  """Not equal. Matches all values that are not equal to a specified value."""
  ne: String

  """Not contains. Matches none of the values specified in an array."""
  nin: [String!]

  """&&"""
  overlap: [String!]

  """@>"""
  contains: [String!]

  """<@"""
  contained: [String!]

  """Like. Uses LIKE operator"""
  like: String

  """Regexp. Uses REGEXP operator"""
  re: String

  """Full text.	A driver specific full text search function."""
  fulltext: String

  """ilike"""
  ilike: String
}

input IntComparisonOperators {
  """Equals. Matches values that are equal to a specified value."""
  eq: Int

  """Greater. Matches values that are greater than a specified value."""
  gt: Int

  """
  Greater or Equal. Matches values that are greater than or equal to a specified value.
  """
  gte: Int

  """Contains, Contains, Matches any of the values specified in an array."""
  in: [Int!]

  """Lower, Matches values that are less than a specified value."""
  lt: Int

  """
  Lower or equal, Matches values that are less than or equal to a specified value.
  """
  lte: Int

  """Not equal. Matches all values that are not equal to a specified value."""
  ne: Int

  """Not contains. Matches none of the values specified in an array."""
  nin: [Int!]

  """&&"""
  overlap: [Int!]

  """@>"""
  contains: [Int!]

  """<@"""
  contained: [Int!]
}

input UserOrderBy {
  id: QueryOrder
  name: QueryOrder
  email: QueryOrder
  age: QueryOrder
}

enum QueryOrder {
  ASC
  ASC_NULLS_LAST
  ASC_NULLS_FIRST
  DESC
  DESC_NULLS_LAST
  DESC_NULLS_FIRST
}