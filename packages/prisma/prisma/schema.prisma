// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output       = "../test/client"
}

generator gqloom {
  provider     = "node ./bin/generator.cjs"
  output       = "../test/generated"
  commonjsFile = ""
  moduleFile   = "index.js"
  typesFiles   = ["index.d.ts"]
  gqloomPath   = "../../dist"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String?
  posts          Post[]
  publishedPosts Post[]   @relation("UserToPublishedPost")
  profile        Profile?
}

model Profile {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int    @unique // relation scalar field (used in the `@relation` attribute above)
  introduction String
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)

  author   User @relation(fields: authorId, references: id, onDelete: Cascade)
  authorId Int

  publisher   User? @relation("UserToPublishedPost", fields: publisherId, references: id)
  publisherId Int?  @map("publishedById")

  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  posts Post[]
}

model Dog {
  firstName String
  lastName  String

  height Float
  weight Int

  birthDate DateTime

  sheeps Sheep[]

  @@id(name: "fullName", fields: [firstName, lastName])
}

model Sheep {
  firstCode String
  lastCode  String

  shepherdFirstName String
  shepherdLastName  String
  shepherd         Dog    @relation(fields: [shepherdFirstName, shepherdLastName], references: [firstName, lastName])

  @@id([firstCode, lastCode])
}

model KeyValue {
  id String @id
  value String
}
