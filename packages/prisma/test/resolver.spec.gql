type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  id: ID!
}

input CategoryCreateNestedManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutPostsInput!]
  create: [EmptyInput!]
}

input CategoryCreateOrConnectWithoutPostsInput {
  create: EmptyInput!
  where: CategoryWhereUniqueInput!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  id: IntFilter
}

input CategoryUpdateManyWithWhereWithoutPostsInput {
  data: EmptyInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutPostsNestedInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutPostsInput!]
  create: [EmptyInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutPostsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPostsInput!]
}

input CategoryUpdateWithWhereUniqueWithoutPostsInput {
  data: EmptyInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutPostsInput {
  create: EmptyInput!
  update: EmptyInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: IntFilter
  posts: PostListRelationFilter
}

input CategoryWhereUniqueInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: Int
  posts: PostListRelationFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: String
}

input DateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedDateTimeFilter
  notIn: [String!]
}

type Dog {
  birthDate: String!
  firstName: String!
  height: Float!
  lastName: String!
  sheeps: [Sheep!]!
  weight: Int!
}

input DogCreateInput {
  birthDate: String!
  firstName: String!
  height: Float!
  lastName: String!
  sheeps: SheepCreateNestedManyWithoutShepherdInput
  weight: Int!
}

input DogCreateManyInput {
  birthDate: String!
  firstName: String!
  height: Float!
  lastName: String!
  weight: Int!
}

input DogCreateNestedOneWithoutSheepsInput {
  connect: DogWhereUniqueInput
  connectOrCreate: DogCreateOrConnectWithoutSheepsInput
  create: DogCreateWithoutSheepsInput
}

input DogCreateOrConnectWithoutSheepsInput {
  create: DogCreateWithoutSheepsInput!
  where: DogWhereUniqueInput!
}

input DogCreateWithoutSheepsInput {
  birthDate: String!
  firstName: String!
  height: Float!
  lastName: String!
  weight: Int!
}

input DogFullNameCompoundUniqueInput {
  firstName: String!
  lastName: String!
}

input DogOrderByWithRelationInput {
  birthDate: SortOrder
  firstName: SortOrder
  height: SortOrder
  lastName: SortOrder
  sheeps: SheepOrderByRelationAggregateInput
  weight: SortOrder
}

enum DogScalarFieldEnum {
  birthDate
  firstName
  height
  lastName
  weight
}

input DogScalarRelationFilter {
  is: DogWhereInput
  isNot: DogWhereInput
}

input DogUpdateInput {
  birthDate: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  sheeps: SheepUpdateManyWithoutShepherdNestedInput
  weight: IntFieldUpdateOperationsInput
}

input DogUpdateManyMutationInput {
  birthDate: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  weight: IntFieldUpdateOperationsInput
}

input DogUpdateOneRequiredWithoutSheepsNestedInput {
  connect: DogWhereUniqueInput
  connectOrCreate: DogCreateOrConnectWithoutSheepsInput
  create: DogCreateWithoutSheepsInput
  update: DogUpdateToOneWithWhereWithoutSheepsInput
  upsert: DogUpsertWithoutSheepsInput
}

input DogUpdateToOneWithWhereWithoutSheepsInput {
  data: DogUpdateWithoutSheepsInput!
  where: DogWhereInput
}

input DogUpdateWithoutSheepsInput {
  birthDate: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  weight: IntFieldUpdateOperationsInput
}

input DogUpsertWithoutSheepsInput {
  create: DogCreateWithoutSheepsInput!
  update: DogUpdateWithoutSheepsInput!
  where: DogWhereInput
}

input DogWhereInput {
  AND: [DogWhereInput!]
  NOT: [DogWhereInput!]
  OR: [DogWhereInput!]
  birthDate: DateTimeFilter
  firstName: StringFilter
  height: FloatFilter
  lastName: StringFilter
  sheeps: SheepListRelationFilter
  weight: IntFilter
}

input DogWhereUniqueInput {
  AND: [DogWhereInput!]
  NOT: [DogWhereInput!]
  OR: [DogWhereInput!]
  birthDate: DateTimeFilter
  firstName: StringFilter
  fullName: DogFullNameCompoundUniqueInput
  height: FloatFilter
  lastName: StringFilter
  sheeps: SheepListRelationFilter
  weight: IntFilter
}

"""Empty input scalar"""
scalar EmptyInput

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createDog(data: DogCreateInput!): Dog
  createManyDog(data: [DogCreateManyInput!]!): BatchPayload
  createManyPost(data: [PostCreateManyInput!]!): BatchPayload
  createManyProfile(data: [ProfileCreateManyInput!]!): BatchPayload
  createManySheep(data: [SheepCreateManyInput!]!): BatchPayload
  createManyUser(data: [UserCreateManyInput!]!): BatchPayload
  createPost(data: PostCreateInput!): Post
  createProfile(data: ProfileCreateInput!): Profile
  createSheep(data: SheepCreateInput!): Sheep
  createUser(data: UserCreateInput!): User
  deleteDog(where: DogWhereUniqueInput!): Dog
  deleteManyDog(where: DogWhereInput): BatchPayload
  deleteManyPost(where: PostWhereInput): BatchPayload
  deleteManyProfile(where: ProfileWhereInput): BatchPayload
  deleteManySheep(where: SheepWhereInput): BatchPayload
  deleteManyUser(where: UserWhereInput): BatchPayload
  deletePost(where: PostWhereUniqueInput!): Post
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteSheep(where: SheepWhereUniqueInput!): Sheep
  deleteUser(where: UserWhereUniqueInput!): User
  updateDog(data: DogUpdateInput!, where: DogWhereUniqueInput!): Dog!
  updateManyDog(data: DogUpdateManyMutationInput!, where: DogWhereInput): BatchPayload
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload
  updateManySheep(data: SheepUpdateManyMutationInput!, where: SheepWhereInput): BatchPayload
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  updateSheep(data: SheepUpdateInput!, where: SheepWhereUniqueInput!): Sheep!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertDog(create: DogCreateInput!, update: DogUpdateInput!, where: DogWhereUniqueInput!): Dog!
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertSheep(create: SheepCreateInput!, update: SheepUpdateInput!, where: SheepWhereUniqueInput!): Sheep!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedDateTimeFilter
  notIn: [String!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Post {
  author: User!
  authorId: Int!
  categories: [Category!]!
  content: String
  id: ID!
  published: Boolean!
  publisher: User
  publisherId: Int
  title: String!
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  categories: CategoryCreateNestedManyWithoutPostsInput
  content: String
  published: Boolean
  publisher: UserCreateNestedOneWithoutPublishedPostsInput
  title: String!
}

input PostCreateManyAuthorInput {
  content: String
  id: Int
  published: Boolean
  publisherId: Int
  title: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
}

input PostCreateManyInput {
  authorId: Int!
  content: String
  id: Int
  published: Boolean
  publisherId: Int
  title: String!
}

input PostCreateManyPublisherInput {
  authorId: Int!
  content: String
  id: Int
  published: Boolean
  title: String!
}

input PostCreateManyPublisherInputEnvelope {
  data: [PostCreateManyPublisherInput!]!
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedManyWithoutPublisherInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutPublisherInput!]
  create: [PostCreateWithoutPublisherInput!]
  createMany: PostCreateManyPublisherInputEnvelope
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutPublisherInput {
  create: PostCreateWithoutPublisherInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  categories: CategoryCreateNestedManyWithoutPostsInput
  content: String
  published: Boolean
  publisher: UserCreateNestedOneWithoutPublishedPostsInput
  title: String!
}

input PostCreateWithoutPublisherInput {
  author: UserCreateNestedOneWithoutPostsInput!
  categories: CategoryCreateNestedManyWithoutPostsInput
  content: String
  published: Boolean
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  categories: CategoryOrderByRelationAggregateInput
  content: SortOrderInput
  id: SortOrder
  published: SortOrder
  publisher: UserOrderByWithRelationInput
  publisherId: SortOrderInput
  title: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  content
  id
  published
  publisherId
  title
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: IntFilter
  content: StringNullableFilter
  id: IntFilter
  published: BoolFilter
  publisherId: IntNullableFilter
  title: StringFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  categories: CategoryUpdateManyWithoutPostsNestedInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  publisher: UserUpdateOneWithoutPublishedPostsNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutPublisherInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithoutPublisherNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutPublisherInput!]
  create: [PostCreateWithoutPublisherInput!]
  createMany: PostCreateManyPublisherInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPublisherInput!]
  updateMany: [PostUpdateManyWithWhereWithoutPublisherInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPublisherInput!]
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutPublisherInput {
  data: PostUpdateWithoutPublisherInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  categories: CategoryUpdateManyWithoutPostsNestedInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  publisher: UserUpdateOneWithoutPublishedPostsNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutPublisherInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  categories: CategoryUpdateManyWithoutPostsNestedInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutPublisherInput {
  create: PostCreateWithoutPublisherInput!
  update: PostUpdateWithoutPublisherInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserScalarRelationFilter
  authorId: IntFilter
  categories: CategoryListRelationFilter
  content: StringNullableFilter
  id: IntFilter
  published: BoolFilter
  publisher: UserNullableScalarRelationFilter
  publisherId: IntNullableFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserScalarRelationFilter
  authorId: IntFilter
  categories: CategoryListRelationFilter
  content: StringNullableFilter
  id: Int
  published: BoolFilter
  publisher: UserNullableScalarRelationFilter
  publisherId: IntNullableFilter
  title: StringFilter
}

type Profile {
  id: ID!
  introduction: String!
  user: User!
  userId: Int!
}

input ProfileCreateInput {
  introduction: String!
  user: UserCreateNestedOneWithoutProfileInput!
}

input ProfileCreateManyInput {
  id: Int
  introduction: String!
  userId: Int!
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  introduction: String!
}

input ProfileNullableScalarRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileOrderByWithRelationInput {
  id: SortOrder
  introduction: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ProfileScalarFieldEnum {
  id
  introduction
  userId
}

input ProfileUpdateInput {
  introduction: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileNestedInput
}

input ProfileUpdateManyMutationInput {
  introduction: StringFieldUpdateOperationsInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  delete: ProfileWhereInput
  disconnect: ProfileWhereInput
  update: ProfileUpdateToOneWithWhereWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateToOneWithWhereWithoutUserInput {
  data: ProfileUpdateWithoutUserInput!
  where: ProfileWhereInput
}

input ProfileUpdateWithoutUserInput {
  introduction: StringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
  where: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  id: IntFilter
  introduction: StringFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input ProfileWhereUniqueInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  id: Int
  introduction: StringFilter
  user: UserScalarRelationFilter
  userId: Int
}

type Query {
  countDog(cursor: DogWhereUniqueInput, orderBy: [DogOrderByWithRelationInput!], skip: Int, take: Int, where: DogWhereInput): Int!
  countPost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Int!
  countProfile(cursor: ProfileWhereUniqueInput, orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): Int!
  countSheep(cursor: SheepWhereUniqueInput, orderBy: [SheepOrderByWithRelationInput!], skip: Int, take: Int, where: SheepWhereInput): Int!
  countUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): Int!
  findFirstDog(cursor: DogWhereUniqueInput, distinct: [DogScalarFieldEnum!], orderBy: [DogOrderByWithRelationInput!], skip: Int, take: Int, where: DogWhereInput): Dog
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): Profile
  findFirstSheep(cursor: SheepWhereUniqueInput, distinct: [SheepScalarFieldEnum!], orderBy: [SheepOrderByWithRelationInput!], skip: Int, take: Int, where: SheepWhereInput): Sheep
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findManyDog(cursor: DogWhereUniqueInput, distinct: [DogScalarFieldEnum!], orderBy: [DogOrderByWithRelationInput!], skip: Int, take: Int, where: DogWhereInput): [Dog!]!
  findManyPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findManyProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  findManySheep(cursor: SheepWhereUniqueInput, distinct: [SheepScalarFieldEnum!], orderBy: [SheepOrderByWithRelationInput!], skip: Int, take: Int, where: SheepWhereInput): [Sheep!]!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findUniqueDog(where: DogWhereUniqueInput): Dog
  findUniquePost(where: PostWhereUniqueInput): Post
  findUniqueProfile(where: ProfileWhereUniqueInput): Profile
  findUniqueSheep(where: SheepWhereUniqueInput): Sheep
  findUniqueUser(where: UserWhereUniqueInput): User
}

type Sheep {
  firstCode: String!
  lastCode: String!
  shepherd: Dog!
  shepherdFirstName: String!
  shepherdLastName: String!
}

input SheepCreateInput {
  firstCode: String!
  lastCode: String!
  shepherd: DogCreateNestedOneWithoutSheepsInput!
}

input SheepCreateManyInput {
  firstCode: String!
  lastCode: String!
  shepherdFirstName: String!
  shepherdLastName: String!
}

input SheepCreateManyShepherdInput {
  firstCode: String!
  lastCode: String!
}

input SheepCreateManyShepherdInputEnvelope {
  data: [SheepCreateManyShepherdInput!]!
}

input SheepCreateNestedManyWithoutShepherdInput {
  connect: [SheepWhereUniqueInput!]
  connectOrCreate: [SheepCreateOrConnectWithoutShepherdInput!]
  create: [SheepCreateWithoutShepherdInput!]
  createMany: SheepCreateManyShepherdInputEnvelope
}

input SheepCreateOrConnectWithoutShepherdInput {
  create: SheepCreateWithoutShepherdInput!
  where: SheepWhereUniqueInput!
}

input SheepCreateWithoutShepherdInput {
  firstCode: String!
  lastCode: String!
}

input SheepFirstCodeLastCodeCompoundUniqueInput {
  firstCode: String!
  lastCode: String!
}

input SheepListRelationFilter {
  every: SheepWhereInput
  none: SheepWhereInput
  some: SheepWhereInput
}

input SheepOrderByRelationAggregateInput {
  _count: SortOrder
}

input SheepOrderByWithRelationInput {
  firstCode: SortOrder
  lastCode: SortOrder
  shepherd: DogOrderByWithRelationInput
  shepherdFirstName: SortOrder
  shepherdLastName: SortOrder
}

enum SheepScalarFieldEnum {
  firstCode
  lastCode
  shepherdFirstName
  shepherdLastName
}

input SheepScalarWhereInput {
  AND: [SheepScalarWhereInput!]
  NOT: [SheepScalarWhereInput!]
  OR: [SheepScalarWhereInput!]
  firstCode: StringFilter
  lastCode: StringFilter
  shepherdFirstName: StringFilter
  shepherdLastName: StringFilter
}

input SheepUpdateInput {
  firstCode: StringFieldUpdateOperationsInput
  lastCode: StringFieldUpdateOperationsInput
  shepherd: DogUpdateOneRequiredWithoutSheepsNestedInput
}

input SheepUpdateManyMutationInput {
  firstCode: StringFieldUpdateOperationsInput
  lastCode: StringFieldUpdateOperationsInput
}

input SheepUpdateManyWithWhereWithoutShepherdInput {
  data: SheepUpdateManyMutationInput!
  where: SheepScalarWhereInput!
}

input SheepUpdateManyWithoutShepherdNestedInput {
  connect: [SheepWhereUniqueInput!]
  connectOrCreate: [SheepCreateOrConnectWithoutShepherdInput!]
  create: [SheepCreateWithoutShepherdInput!]
  createMany: SheepCreateManyShepherdInputEnvelope
  delete: [SheepWhereUniqueInput!]
  deleteMany: [SheepScalarWhereInput!]
  disconnect: [SheepWhereUniqueInput!]
  set: [SheepWhereUniqueInput!]
  update: [SheepUpdateWithWhereUniqueWithoutShepherdInput!]
  updateMany: [SheepUpdateManyWithWhereWithoutShepherdInput!]
  upsert: [SheepUpsertWithWhereUniqueWithoutShepherdInput!]
}

input SheepUpdateWithWhereUniqueWithoutShepherdInput {
  data: SheepUpdateWithoutShepherdInput!
  where: SheepWhereUniqueInput!
}

input SheepUpdateWithoutShepherdInput {
  firstCode: StringFieldUpdateOperationsInput
  lastCode: StringFieldUpdateOperationsInput
}

input SheepUpsertWithWhereUniqueWithoutShepherdInput {
  create: SheepCreateWithoutShepherdInput!
  update: SheepUpdateWithoutShepherdInput!
  where: SheepWhereUniqueInput!
}

input SheepWhereInput {
  AND: [SheepWhereInput!]
  NOT: [SheepWhereInput!]
  OR: [SheepWhereInput!]
  firstCode: StringFilter
  lastCode: StringFilter
  shepherd: DogScalarRelationFilter
  shepherdFirstName: StringFilter
  shepherdLastName: StringFilter
}

input SheepWhereUniqueInput {
  AND: [SheepWhereInput!]
  NOT: [SheepWhereInput!]
  OR: [SheepWhereInput!]
  firstCode: StringFilter
  firstCode_lastCode: SheepFirstCodeLastCodeCompoundUniqueInput
  lastCode: StringFilter
  shepherd: DogScalarRelationFilter
  shepherdFirstName: StringFilter
  shepherdLastName: StringFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
  profile: Profile
  publishedPosts: [Post!]!
}

input UserCreateInput {
  email: String!
  name: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: ProfileCreateNestedOneWithoutUserInput
  publishedPosts: PostCreateNestedManyWithoutPublisherInput
}

input UserCreateManyInput {
  email: String!
  id: Int
  name: String
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserCreateWithoutProfileInput
}

input UserCreateNestedOneWithoutPublishedPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPublishedPostsInput
  create: UserCreateWithoutPublishedPostsInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPublishedPostsInput {
  create: UserCreateWithoutPublishedPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  email: String!
  name: String
  profile: ProfileCreateNestedOneWithoutUserInput
  publishedPosts: PostCreateNestedManyWithoutPublisherInput
}

input UserCreateWithoutProfileInput {
  email: String!
  name: String
  posts: PostCreateNestedManyWithoutAuthorInput
  publishedPosts: PostCreateNestedManyWithoutPublisherInput
}

input UserCreateWithoutPublishedPostsInput {
  email: String!
  name: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserNullableScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  posts: PostOrderByRelationAggregateInput
  profile: ProfileOrderByWithRelationInput
  publishedPosts: PostOrderByRelationAggregateInput
}

enum UserScalarFieldEnum {
  email
  id
  name
}

input UserScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  publishedPosts: PostUpdateManyWithoutPublisherNestedInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateToOneWithWhereWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutProfileNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserCreateWithoutProfileInput
  update: UserUpdateToOneWithWhereWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateOneWithoutPublishedPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPublishedPostsInput
  create: UserCreateWithoutPublishedPostsInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutPublishedPostsInput
  upsert: UserUpsertWithoutPublishedPostsInput
}

input UserUpdateToOneWithWhereWithoutPostsInput {
  data: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutProfileInput {
  data: UserUpdateWithoutProfileInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutPublishedPostsInput {
  data: UserUpdateWithoutPublishedPostsInput!
  where: UserWhereInput
}

input UserUpdateWithoutPostsInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  publishedPosts: PostUpdateManyWithoutPublisherNestedInput
}

input UserUpdateWithoutProfileInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  publishedPosts: PostUpdateManyWithoutPublisherNestedInput
}

input UserUpdateWithoutPublishedPostsInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpsertWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  update: UserUpdateWithoutProfileInput!
  where: UserWhereInput
}

input UserUpsertWithoutPublishedPostsInput {
  create: UserCreateWithoutPublishedPostsInput!
  update: UserUpdateWithoutPublishedPostsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  posts: PostListRelationFilter
  profile: ProfileNullableScalarRelationFilter
  publishedPosts: PostListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: String
  id: Int
  name: StringNullableFilter
  posts: PostListRelationFilter
  profile: ProfileNullableScalarRelationFilter
  publishedPosts: PostListRelationFilter
}