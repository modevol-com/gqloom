input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type Post {
  author: User
  authorId: Int
  content: String
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrderInput
  content: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  viewCount: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  content
  createdAt
  id
  published
  title
  updatedAt
  viewCount
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserNullableScalarRelationFilter
  authorId: IntNullableFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserNullableScalarRelationFilter
  authorId: IntNullableFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: Int
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
}

type Query {
  countPost(
    cursor: PostWhereUniqueInput
    orderBy: [PostOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: PostWhereInput
  ): Int!
  countUser(
    cursor: UserWhereUniqueInput
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): Int!
  findFirstPost(
    cursor: PostWhereUniqueInput
    distinct: [PostScalarFieldEnum!]
    orderBy: [PostOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: PostWhereInput
  ): Post
  findFirstUser(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): User
  findManyPost(
    cursor: PostWhereUniqueInput
    distinct: [PostScalarFieldEnum!]
    orderBy: [PostOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: PostWhereInput
  ): [Post!]!
  findManyUser(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
  findUniquePost(where: PostWhereUniqueInput): Post
  findUniqueUser(where: UserWhereUniqueInput): User
  users: [User!]!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

input UserNullableScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  posts: PostOrderByRelationAggregateInput
}

enum UserScalarFieldEnum {
  email
  id
  name
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: String
  id: Int
  name: StringNullableFilter
  posts: PostListRelationFilter
}
