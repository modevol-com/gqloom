type UsersItem {
  id: Int!
  name: String!
  phone: String!
  cats: [CatsItem!]!
}

type CatsItem {
  id: Int!
  name: String!
  birthday: DateTime!
  ownerId: Int!
  age(currentYear: Int): Float!
  owner: UsersItem
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Query {
  hello(name: String): String!
  mine: UsersItem!
  usersByName(name: String!): [UsersItem!]!
  userByPhone(phone: String!): UsersItem
  cats(
    offset: Int
    limit: Int
    orderBy: CatsOrderBy
    where: CatsFilters
  ): [CatsItem!]!
}

input CatsOrderBy {
  id: OrderDirection
  name: OrderDirection
  birthday: OrderDirection
  ownerId: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CatsFilters {
  id: SQLiteIntegerFilters
  name: SQLiteTextFilters
  birthday: SQLiteTimestampFilters
  ownerId: SQLiteIntegerFilters
  OR: [CatsFiltersNested!]
  AND: [CatsFiltersNested!]
  NOT: CatsFiltersNested
}

input SQLiteIntegerFilters {
  eq: Int
  ne: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  in: [Int!]
  notIn: [Int!]
  isNull: Boolean
  isNotNull: Boolean
  OR: [SQLiteIntegerFiltersNested!]
  AND: [SQLiteIntegerFiltersNested!]
  NOT: SQLiteIntegerFiltersNested
}

input SQLiteIntegerFiltersNested {
  eq: Int
  ne: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  in: [Int!]
  notIn: [Int!]
  isNull: Boolean
  isNotNull: Boolean
}

input SQLiteTextFilters {
  eq: String
  ne: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  notLike: String
  ilike: String
  notIlike: String
  in: [String!]
  notIn: [String!]
  isNull: Boolean
  isNotNull: Boolean
  OR: [SQLiteTextFiltersNested!]
  AND: [SQLiteTextFiltersNested!]
  NOT: SQLiteTextFiltersNested
}

input SQLiteTextFiltersNested {
  eq: String
  ne: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  notLike: String
  ilike: String
  notIlike: String
  in: [String!]
  notIn: [String!]
  isNull: Boolean
  isNotNull: Boolean
}

input SQLiteTimestampFilters {
  eq: DateTime
  ne: DateTime
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  isNull: Boolean
  isNotNull: Boolean
  OR: [SQLiteTimestampFiltersNested!]
  AND: [SQLiteTimestampFiltersNested!]
  NOT: SQLiteTimestampFiltersNested
}

input SQLiteTimestampFiltersNested {
  eq: DateTime
  ne: DateTime
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  isNull: Boolean
  isNotNull: Boolean
}

input CatsFiltersNested {
  id: SQLiteIntegerFilters
  name: SQLiteTextFilters
  birthday: SQLiteTimestampFilters
  ownerId: SQLiteIntegerFilters
}

type Mutation {
  createUser(data: CreateUserDataInput!): UsersItem!
  insertCats(
    values: [CatsInsertInput!]!
    onConflictDoUpdate: CatsInsertOnConflictDoUpdateInput
    onConflictDoNothing: CatsInsertOnConflictDoNothingInput
  ): [CatsItem!]!
  createManyCats(values: [CreateManyCatsValuesInput!]!): [CatsItem!]!
}

input CreateUserDataInput {
  name: String!
  phone: String!
}

input CatsInsertInput {
  id: Int
  name: String!
  birthday: DateTime!
  ownerId: Int!
}

input CatsInsertOnConflictDoUpdateInput {
  target: [CatsTableColumn!]!
  set: CatsInsertInput
  targetWhere: CatsFilters
  setWhere: CatsFilters
}

enum CatsTableColumn {
  id
  name
  birthday
  ownerId
}

input CatsInsertOnConflictDoNothingInput {
  target: [CatsTableColumn!]
  where: CatsFilters
}

input CreateManyCatsValuesInput {
  name: String!
  birthday: String!
}
